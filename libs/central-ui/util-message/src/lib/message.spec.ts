import { getErrorMessage } from './messages';
describe('getErrorMessage', () => {
    it.each`
        messageKey                                                          | params                                                           | expectedMessage
        ${'error.argumentTypeMismatch'}                                     | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.argumentTypeMismatch', hasTimeout: false }}
        ${'error.argumentNotValid'}                                         | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.argumentNotValid', hasTimeout: false }}
        ${'error.bindValue'}                                                | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.bindValue', hasTimeout: false }}
        ${'error.concurrencyFailure'}                                       | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.concurrencyFailure', hasTimeout: false }}
        ${'error.constraintViolation'}                                      | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.constraintViolation', hasTimeout: false }}
        ${'error.conversionNotSupport'}                                     | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.conversionNotSupport', hasTimeout: false }}
        ${'error.dataAccess'}                                               | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.dataAccess', hasTimeout: false }}
        ${'error.dataIntegrityViolation'}                                   | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.dataIntegrityViolation', hasTimeout: false }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'isRequired', true, 'AssertFalse']}            | ${{ message: 'Is Required must be false', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'isRequired', false, 'AssertTrue']}            | ${{ message: 'Is Required must be true', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'salesPrice', '99999.99', 'Currency']}         | ${{ message: '99999.99 does not fit within the allowed decimal range for Sales Price', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'salesPrice', '99999.99', 'DecimalMax']}       | ${{ message: '99999.99 is greater than the max allowed value for Sales Price', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'salesPrice', '0.00', 'DecimalMin']}           | ${{ message: '0.00 is less than the min allowed value for Sales Price', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'unitOfMeasure', '100.999', 'Digits']}         | ${{ message: 'Incorrect precision or scale in 100.999 for Unit Of Measure', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'userEmail', 'test@@email', 'Email']}          | ${{ message: 'User Email contains an invalid email test@@email', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'minUsage', 20, 'FieldValueRange']}            | ${{ message: 'Min Usage is out of range of another required field', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'salesDate', '2020-04-19', 'Future']}          | ${{ message: 'Sales Date must be a future date', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'salesDate', '2020-04-19', 'FutureOrPresent']} | ${{ message: "Sales Date must be today's date or a future date", hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'localeLanguage', 'es-12', 'Language']}        | ${{ message: 'es-12 should be in one of the following formats("aa","aa_BB","aa_BB_CC") for Locale Language', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'quantityPerPack', 100, 'Max']}                | ${{ message: '100 is greater than the max allowed value for Quantity Per Pack', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'quantityPerPack', 0, 'Min']}                  | ${{ message: '0 is less than the min allowed value for Quantity Per Pack', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'usedAmount', 1, 'Negative']}                  | ${{ message: 'Used Amount must be less than 0', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'usedAmount', 1, 'NegativeOrZero']}            | ${{ message: 'Used Amount must be less than or equal to 0', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'productCode', '', 'NotBlank']}                | ${{ message: 'Product Code must not be blank', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'invoiceDetails', [], 'NotEmpty']}             | ${{ message: 'Invoice Details must not be empty', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'productDescription', null, 'NotNull']}        | ${{ message: 'Product Description must not be null', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'deprecatedField', 'Test', 'Null']}            | ${{ message: 'Deprecated Field must be null', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'soldDate', false, 'Past']}                    | ${{ message: 'Sold Date must be a past date', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'soldDate', '2020-04-21', 'PastOrPresent']}    | ${{ message: "Sold Date must be a past date or today's date", hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'fileFormat', 'AAX_2020-04-20_', 'Pattern']}   | ${{ message: 'AAX_2020-04-20_ does not match the required pattern for File Format', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'soldAmount', -1, 'Positive']}                 | ${{ message: 'Sold Amount must be greater than 0', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'soldAmount', -1, 'PositiveOrZero']}           | ${{ message: 'Sold Amount must be greater than or equal to 0', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'packageAmount', 12, 'Quantity']}              | ${{ message: '12 does not fit the within the allowed size for Package Amount', hasTimeout: true }}
        ${'error.fieldNotValid'}                                            | ${['testRequest', 'reportOrder', 12, 'Size']}                    | ${{ message: '12 does not fit the allowed size for Report Order', hasTimeout: true }}
        ${'error.fieldAssertFalseConstraint'}                               | ${['isRequired', true, 'AssertFalse']}                           | ${{ message: 'Is Required must be false', hasTimeout: true }}
        ${'error.fieldAssertTrueConstraint'}                                | ${['isRequired', false, 'AssertTrue']}                           | ${{ message: 'Is Required must be true', hasTimeout: true }}
        ${'error.fieldCurrencyConstraint'}                                  | ${['salesPrice', '99999.99', 'Currency']}                        | ${{ message: '99999.99 does not fit within the allowed decimal range for Sales Price', hasTimeout: true }}
        ${'error.fieldDecimalMaxConstraint'}                                | ${['salesPrice', '99999.99', 'DecimalMax']}                      | ${{ message: '99999.99 is greater than the max allowed value for Sales Price', hasTimeout: true }}
        ${'error.fieldDecimalMinConstraint'}                                | ${['salesPrice', '0.00', 'DecimalMin']}                          | ${{ message: '0.00 is less than the min allowed value for Sales Price', hasTimeout: true }}
        ${'error.fieldDigitsConstraint'}                                    | ${['unitOfMeasure', '100.999', 'Digits']}                        | ${{ message: 'Incorrect precision or scale in 100.999 for Unit Of Measure', hasTimeout: true }}
        ${'error.fieldEmailConstraint'}                                     | ${['userEmail', 'test@@email', 'Email']}                         | ${{ message: 'User Email contains an invalid email test@@email', hasTimeout: true }}
        ${'error.fieldFieldValueRangeConstraint'}                           | ${['minUsage', 20, 'FieldValueRange']}                           | ${{ message: 'Min Usage is out of range of another required field', hasTimeout: true }}
        ${'error.fieldFutureConstraint'}                                    | ${['salesDate', '2020-04-19', 'Future']}                         | ${{ message: 'Sales Date must be a future date', hasTimeout: true }}
        ${'error.fieldFutureOrPresentConstraint'}                           | ${['salesDate', '2020-04-19', 'FutureOrPresent']}                | ${{ message: "Sales Date must be today's date or a future date", hasTimeout: true }}
        ${'error.fieldLanguageConstraint'}                                  | ${['localeLanguage', 'es-12', 'Language']}                       | ${{ message: 'es-12 should be in one of the following formats("aa","aa_BB","aa_BB_CC") for Locale Language', hasTimeout: true }}
        ${'error.fieldMaxConstraint'}                                       | ${['quantityPerPack', 100, 'Max']}                               | ${{ message: '100 is greater than the max allowed value for Quantity Per Pack', hasTimeout: true }}
        ${'error.fieldMinConstraint'}                                       | ${['quantityPerPack', 0, 'Min']}                                 | ${{ message: '0 is less than the min allowed value for Quantity Per Pack', hasTimeout: true }}
        ${'error.fieldNegativeConstraint'}                                  | ${['usedAmount', 1, 'Negative']}                                 | ${{ message: 'Used Amount must be less than 0', hasTimeout: true }}
        ${'error.fieldNegativeOrZeroConstraint'}                            | ${['usedAmount', 1, 'NegativeOrZero']}                           | ${{ message: 'Used Amount must be less than or equal to 0', hasTimeout: true }}
        ${'error.fieldNotBlankConstraint'}                                  | ${['productCode', '', 'NotBlank']}                               | ${{ message: 'Product Code must not be blank', hasTimeout: true }}
        ${'error.fieldNotEmptyConstraint'}                                  | ${['invoiceDetails', [], 'NotEmpty']}                            | ${{ message: 'Invoice Details must not be empty', hasTimeout: true }}
        ${'error.fieldNotNullConstraint'}                                   | ${['productDescription', null, 'NotNull']}                       | ${{ message: 'Product Description must not be null', hasTimeout: true }}
        ${'error.fieldNullConstraint'}                                      | ${['deprecatedField', 'Test', 'Null']}                           | ${{ message: 'Deprecated Field must be null', hasTimeout: true }}
        ${'error.fieldPastConstraint'}                                      | ${['soldDate', false, 'Past']}                                   | ${{ message: 'Sold Date must be a past date', hasTimeout: true }}
        ${'error.fieldPastOrPresentConstraint'}                             | ${['soldDate', '2020-04-21', 'PastOrPresent']}                   | ${{ message: "Sold Date must be a past date or today's date", hasTimeout: true }}
        ${'error.fieldPatternConstraint'}                                   | ${['fileFormat', 'AAX_2020-04-20_', 'Pattern']}                  | ${{ message: 'AAX_2020-04-20_ does not match the required pattern for File Format', hasTimeout: true }}
        ${'error.fieldPositiveConstraint'}                                  | ${['soldAmount', -1, 'Positive']}                                | ${{ message: 'Sold Amount must be greater than 0', hasTimeout: true }}
        ${'error.fieldPositiveOrZeroConstraint'}                            | ${['soldAmount', -1, 'PositiveOrZero']}                          | ${{ message: 'Sold Amount must be greater than or equal to 0', hasTimeout: true }}
        ${'error.fieldQuantityConstraint'}                                  | ${['packageAmount', 12, 'Quantity']}                             | ${{ message: '12 does not fit the within the allowed size for Package Amount', hasTimeout: true }}
        ${'error.fieldSizeConstraint'}                                      | ${['reportOrder', 12, 'Size']}                                   | ${{ message: '12 does not fit the allowed size for Report Order', hasTimeout: true }}
        ${'error.httpMediaTypeNotAcceptable'}                               | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.httpMediaTypeNotAcceptable', hasTimeout: false }}
        ${'error.httpMessageConversion'}                                    | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.httpMessageConversion', hasTimeout: false }}
        ${'error.httpMessageNotWritable'}                                   | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.httpMessageNotWritable', hasTimeout: false }}
        ${'error.internalServerError'}                                      | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.internalServerError', hasTimeout: false }}
        ${'error.invalidFormat'}                                            | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.invalidFormat', hasTimeout: false }}
        ${'error.missingServletRequestPart'}                                | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.missingServletRequestPart', hasTimeout: false }}
        ${'error.noHandlerFound'}                                           | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.noHandlerFound', hasTimeout: false }}
        ${'error.optimisticLockingFailure'}                                 | ${[]}                                                            | ${{ message: 'The record has be changed by another user, please reload the page and try again', hasTimeout: true }}
        ${'error.storeNotActive'}                                           | ${[]}                                                            | ${{ message: 'The store is not active.', hasTimeout: true }}
        ${'error.inventory-api.alreadyFinalized'}                           | ${[]}                                                            | ${{ message: 'Transfer has already been finalized, please reload the page', hasTimeout: true }}
        ${'error.inventory-api.productNotAssignedToStore'}                  | ${['040066', '040067', 'TEST1, TEST2']}                          | ${{ message: 'Product code(s) TEST1, TEST2 were not assigned at both stores 040066 and 040067', hasTimeout: true }}
        ${'error.inventory-api.transferProductNotActive'}                   | ${['040066', 'TEST1']}                                           | ${{ message: 'Product code(s) TEST1 were not active at store 040066', hasTimeout: true }}
        ${'error.inventory-api.transferNotFound'}                           | ${[]}                                                            | ${{ message: 'Transfer not found.', hasTimeout: true }}
        ${'error.inventory-api.invalidTransferStatusForCancel'}             | ${[]}                                                            | ${{ message: 'Unable to cancel a finalized transfer.', hasTimeout: true }}
        ${'error.inventory-api.itemNotActive'}                              | ${['PRODCD1']}                                                   | ${{ message: 'Item(s) PRODCD1 is not active and cannot be ordered', hasTimeout: true }}
        ${'error.inventory-api.itemNotActive'}                              | ${['PRODCD1', 'PRODCD2']}                                        | ${{ message: 'Item(s) PRODCD1, PRODCD2 is not active and cannot be ordered', hasTimeout: true }}
        ${'error.inventory-api.invalidHeight'}                              | ${['18.00', '20.00']}                                            | ${{ message: 'Entered height greater than tank height of 18.00', hasTimeout: true }}
        ${'error.invoice-api.exceedsMaxSearchDays'}                         | ${['90']}                                                        | ${{ message: 'Invoice search is limited to a 90 day period', hasTimeout: true }}
        ${'error.order-api.alreadyFinalized'}                               | ${[]}                                                            | ${{ message: 'Cannot modify an order that has already been finalized.', hasTimeout: true }}
        ${'error.order-api.invalidReceiptOfMaterialStatusForCancel'}        | ${[]}                                                            | ${{ message: 'Unable to cancel a finalized receipt.', hasTimeout: true }}
        ${'error.order-api.invalidOrderStatusForCancel'}                    | ${[]}                                                            | ${{ message: 'Unable to cancel a finalized order', hasTimeout: true }}
        ${'error.order-api.invalidQuantity'}                                | ${[]}                                                            | ${{ message: 'Order Qty is invalid', hasTimeout: true }}
        ${'error.order-api.noSuggestedOrderQuantityForProduct'}             | ${['PRODUCT']}                                                   | ${{ message: 'Unable to generate a Suggested Order Qty for Product PRODUCT', hasTimeout: true }}
        ${'error.order-api.notFoundReceiptOfMaterial'}                      | ${[]}                                                            | ${{ message: 'Receipt not found.', hasTimeout: true }}
        ${'error.order-api.orderNotFound'}                                  | ${[]}                                                            | ${{ message: 'Order not found', hasTimeout: true }}
        ${'error.order-api.productNotAvailableForOrder'}                    | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.order-api.productNotAvailableForOrder', hasTimeout: false }}
        ${'error.order-api.productNotAssignedToStoreException'}             | ${['STORE', 'VENDOR', 'PRODUCT1,PRODUCT2']}                      | ${{ message: 'Product(s) PRODUCT1, PRODUCT2 cannot be ordered', hasTimeout: true }}
        ${'error.order-api.storeProductNotActive'}                          | ${['PRODUCT1,PRODUCT2']}                                         | ${{ message: 'Product(s) PRODUCT1, PRODUCT2 is not active and cannot be ordered', hasTimeout: true }}
        ${'error.order-api.productNotAssignedToVendor'}                     | ${['PRODUCT1,PRODUCT2']}                                         | ${{ message: 'Product(s) PRODUCT1, PRODUCT2 not assigned to vendor and cannot be ordered', hasTimeout: true }}
        ${'error.order-api.productIsObsolete'}                              | ${['PRODUCT1,PRODUCT2']}                                         | ${{ message: 'Product(s) PRODUCT1, PRODUCT2 is obsolete and cannot be ordered', hasTimeout: true }}
        ${'error.order-api.invalidProduct'}                                 | ${['PRODUCT1,PRODUCT2']}                                         | ${{ message: 'Product(s) PRODUCT1, PRODUCT2 is invalid', hasTimeout: true }}
        ${'error.order-api.quantityLessThanMinimumOrderQuantity'}           | ${['PRODUCT', 2.5]}                                              | ${{ message: 'Product PRODUCT Order Qty cannot have an Order Qty less than the Min Order Qty 2.5', hasTimeout: true }}
        ${'error.order-api.quantityNotMultipleOfQuantityPerPack'}           | ${['PRODUCT', 2.5]}                                              | ${{ message: 'Product PRODUCT Order Qty must be a multiple of Qty Per Pack 2.5', hasTimeout: true }}
        ${'error.order-api.receiptAlreadyFinalized'}                        | ${['']}                                                          | ${{ message: 'Cannot modify a Receipt that has already been finalized.', hasTimeout: true }}
        ${'error.order-api.duplicateProducts'}                              | ${['DUPPRODID']}                                                 | ${{ message: 'Found duplicate products DUPPRODID', hasTimeout: true }}
        ${'error.order-api.inactiveProducts'}                               | ${['PRODCD1']}                                                   | ${{ message: 'The following products are inactive, please contact the help desk. PRODCD1', hasTimeout: true }}
        ${'error.order-api.inactiveProducts'}                               | ${['PRODCD1', 'PRODCD2']}                                        | ${{ message: 'The following products are inactive, please contact the help desk. PRODCD1, PRODCD2', hasTimeout: true }}
        ${'error.order-api.duplicateReceiptProducts'}                       | ${['DUPPRODID']}                                                 | ${{ message: 'Found duplicate products DUPPRODID in receipt', hasTimeout: true }}
        ${'error.order-api.splitReceiptWithoutFinalize'}                    | ${[]}                                                            | ${{ message: 'Can only split a receipt when finalizing.', hasTimeout: true }}
        ${'error.order-api.invalidReceiptType'}                             | ${[]}                                                            | ${{ message: 'The requested receipt type is not valid.', hasTimeout: true }}
        ${'error.order-api.invalidQuantityReceivedForSplitReceipt'}         | ${[]}                                                            | ${{ message: 'Can only split a receipt when it has at least one product with received quantity different to zero.', hasTimeout: true }}
        ${'error.order-api.productQuantityReceived'}                        | ${[]}                                                            | ${{ message: 'A product contained an invalid quantity received.', hasTimeout: true }}
        ${'error.order-api.notFoundReceiptType'}                            | ${[]}                                                            | ${{ message: 'The requested receipt type is not valid.', hasTimeout: true }}
        ${'error.order-api.productNotFound'}                                | ${[]}                                                            | ${{ message: 'A requested product is not valid.', hasTimeout: true }}
        ${'error.order-api.vendorNotAtStore'}                               | ${['VEND1']}                                                     | ${{ message: 'Vendor VEND1 is not valid.', hasTimeout: true }}
        ${'error.order-api.vendorIdNotAtStore'}                             | ${[]}                                                            | ${{ message: 'The requested vendor is not valid.', hasTimeout: true }}
        ${'error.order-api.orderTooOld'}                                    | ${[]}                                                            | ${{ message: 'The order you are attempting to save is too old, it will need to be cancelled and a new order created.', hasTimeout: true }}
        ${'error.order-api.invalidSplitReceiptType'}                        | ${[]}                                                            | ${{ message: 'Can only split a regular receipt.', hasTimeout: true }}
        ${'error.organization-api.activeFilter'}                            | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.organization-api.activeFilter', hasTimeout: false }}
        ${'error.organization-api.organizationalResourceNotFound'}          | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.organization-api.organizationalResourceNotFound', hasTimeout: false }}
        ${'error.organization-api.tooManyParents'}                          | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.organization-api.tooManyParents', hasTimeout: false }}
        ${'error.organization-api.unparseableResource'}                     | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.organization-api.unparseableResource', hasTimeout: false }}
        ${'error.persistence'}                                              | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.persistence', hasTimeout: false }}
        ${'error.pessimisticLockingFailure'}                                | ${[]}                                                            | ${{ message: 'Another user is currently updating this record, please try again later', hasTimeout: true }}
        ${'error.requestBinding'}                                           | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requestBinding', hasTimeout: false }}
        ${'error.requestMethodNotSupported'}                                | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requestMethodNotSupported', hasTimeout: false }}
        ${'error.requiredMediaTypeMissing'}                                 | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requiredMediaTypeMissing', hasTimeout: false }}
        ${'error.requiredPathVariableMissing'}                              | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requiredPathVariableMissing', hasTimeout: false }}
        ${'error.requiredRequestBodyMissing'}                               | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requiredRequestBodyMissing', hasTimeout: false }}
        ${'error.requiredRequestHeaderMissing'}                             | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requiredRequestHeaderMissing', hasTimeout: false }}
        ${'error.requiredRequestParameterMissing'}                          | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.requiredRequestParameterMissing', hasTimeout: false }}
        ${'error.staleDataException'}                                       | ${[]}                                                            | ${{ message: 'The record has be changed by another user, please reload the page and try again', hasTimeout: true }}
        ${'error.staleStateException'}                                      | ${[]}                                                            | ${{ message: 'This record has been updated by another user. Please refresh the page and try again.', hasTimeout: true }}
        ${'error.transactionFailed'}                                        | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.transactionFailed', hasTimeout: false }}
        ${'error.typeMismatch'}                                             | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.typeMismatch', hasTimeout: false }}
        ${'error.unsupportedMediaType'}                                     | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.unsupportedMediaType', hasTimeout: false }}
        ${'error.unMappedError'}                                            | ${[]}                                                            | ${{ message: 'Your request could not be processed, please contact the Help Desk for more details or assistance: error.unMappedError', hasTimeout: false }}
        ${'error.service-api.cannotDeactivateServiceActiveAtCompanies'}     | ${[]}                                                            | ${{ message: 'This service is active for one or more companies. Please deactivate at the company level before proceeding.', hasTimeout: true }}
        ${'error.service-api.cannotDeactivateServiceActiveAtStores'}        | ${[]}                                                            | ${{ message: 'This service is active for one or more stores. Please deactivate at the store level before proceeding.', hasTimeout: true }}
        ${'error.service-api.cannotDeactivateCompanyServiceActiveAtStores'} | ${[]}                                                            | ${{ message: 'This company service is active for one or more stores. Please deactivate at the store level before proceeding.', hasTimeout: true }}
        ${'error.service-api.premiumMismatchChildCategory'}                 | ${[]}                                                            | ${{ message: 'This category has child categories that are not premium. Please make those premium before proceeding.', hasTimeout: true }}
        ${'error.service-api.premiumMismatchParentCategory'}                | ${[]}                                                            | ${{ message: 'A child category must be premium if its parent is premium.', hasTimeout: true }}
        ${'error.service-api.serviceInactive'}                              | ${[]}                                                            | ${{ message: 'Service is deactivated at the Catalog level. Please activate to continue.', hasTimeout: true }}
        ${'error.service-api.inactiveParentCategory'}                       | ${[]}                                                            | ${{ message: 'The selected parent category is deactivated. Please activate to continue.', hasTimeout: true }}
        ${'error.service-api.serviceCategoryAlreadyExists'}                 | ${[]}                                                            | ${{ message: 'Cannot add Service Category. Category Code already exists.', hasTimeout: true }}
        ${'error.service-api.unassignableServiceCategory'}                  | ${[]}                                                            | ${{ message: 'The service has an invalid category. The category must be active and cannot be a parent category.', hasTimeout: true }}
        ${'error.service-api.serviceAlreadyExists'}                         | ${[]}                                                            | ${{ message: 'Cannot add Service. Code already exists.', hasTimeout: true }}
        ${'error.product-api.productInactive'}                              | ${[]}                                                            | ${{ message: 'Product is deactivated at the Catalog level. Please activate to continue.', hasTimeout: true }}
        ${'error.product-api.circularProductCategoryHierarchy'}             | ${[]}                                                            | ${{ message: 'The selected Parent Category cannot have a relation with the current category, please select another Parent Category.', hasTimeout: true }}
        ${'error.product-api.rootCategoryIncludesMotorInfo'}                | ${[]}                                                            | ${{ message: 'A Product Category without a Parent cannot have Motor Information.', hasTimeout: true }}
        ${'error.product-api.productCategoryCodeAlreadyExists'}             | ${[]}                                                            | ${{ message: 'Cannot add Product Category. Category Code already exists.', hasTimeout: true }}
        ${'error.product-api.unassignableProductCategory'}                  | ${[]}                                                            | ${{ message: 'The product has an invalid category. The category must be active and cannot be a parent category.', hasTimeout: true }}
        ${'error.product-api.productAlreadyExists'}                         | ${[]}                                                            | ${{ message: 'Cannot add Product. Code already exists.', hasTimeout: true }}
        ${'error.tsb-api.serviceCategoryNoVehicles'}                        | ${[]}                                                            | ${{ message: 'At least one vehicle must be supplied to add a service category.', hasTimeout: true }}
        ${'error.discount-api.discountNotFound'}                            | ${[]}                                                            | ${{ message: 'Discount not found.', hasTimeout: true }}
    `(`$messageKey should display a proper message`, ({ messageKey, params, expectedMessage }) => {
        const message = getErrorMessage(messageKey, params);
        expect(message).toEqual(expectedMessage);
    });
});
